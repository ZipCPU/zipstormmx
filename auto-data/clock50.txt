################################################################################
##
## Filename: 	clock50.txt
##
## Project:	ZipSTORM-MX, an iCE40 ZipCPU demonstration project
##
## Purpose:	Creates and defines a 50MHz clock for the rest of the design to
##		use as the system clock.
##
## Creator:	Dan Gisselquist, Ph.D.
##		Gisselquist Technology, LLC
##
################################################################################
##
## Copyright (C) 2019, Gisselquist Technology, LLC
##
## This program is free software (firmware): you can redistribute it and/or
## modify it under the terms of  the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or (at
## your option) any later version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY or
## FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program.  (It's in the $(ROOT)/doc directory.  Run make with no
## target there if the PDF file isn't present.)  If not, see
## <http://www.gnu.org/licenses/> for a copy.
##
## License:	GPL, v3, as defined and found on www.gnu.org,
##		http://www.gnu.org/licenses/gpl.html
##
##
################################################################################
##
##
@$CLKFREQHZ=50000000
@PREFIX=clk
@CLOCK.TOP=i_clk
@CLOCK.NAME=clk
@CLOCK.WIRE=i_clk
@TOP.DEFNS=
	wire		s_clk, s_reset, pll_locked, clk_50mhz;
@TOP.INSERT=
	assign	s_reset = 1'b0; // This design requires local, not global resets

`ifdef	VERILATOR
	assign	s_clk = i_clk;
`else
	SB_PLL40_CORE #(
		.FEEDBACK_PATH("SIMPLE"),
		.DELAY_ADJUSTMENT_MODE_FEEDBACK("FIXED"),
		.DELAY_ADJUSTMENT_MODE_RELATIVE("FIXED"),
		.PLLOUT_SELECT("GENCLK"),
		.FDA_FEEDBACK(4'b1111),
		.FDA_RELATIVE(4'b1111),
		.DIVR(4'd0),		// Divide by (DIVR+1)
		.DIVQ(3'd4),		// Divide by 2^(DIVQ)
		.DIVF(7'd31),		// Multiply by (DIVF+1)
		.FILTER_RANGE(3'b010)
	) plli (
		// .PACKAGEPIN     (i_clk     ),
		.REFERENCECLK   (i_clk     ),
		.PLLOUTCORE     (clk_50mhz ),
		.LOCK           (pll_locked),
		.BYPASS         (1'b0      ),
		.RESETB         (1'b1      )
	);

	SB_GB global_buffer(clk_50mhz, s_clk);
`endif

@REGDEFS.H.DEFNS=
#define	CLKFREQHZ	@$CLKFREQHZ
@BDEF.DEFN=
#define	CLKFREQHZ	@$CLKFREQHZ
@CLOCK.NAME=clk
@CLOCK.FREQUENCY= @$CLKFREQHZ
